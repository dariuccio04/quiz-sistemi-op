quiz u5-s4

Quiz
Che cos'è una pipe?

A) Una forma di memoria condivisa.
B) Un metodo di comunicazione tra processi.
C) Un tipo di file system.
D) Un programma di sistema.
Risposta: B

Qual è la limitazione principale delle pipe normali?

A) Possono essere utilizzate solo tra processi con un "antenato" in comune.
B) Non possono essere utilizzate su sistemi Linux.
C) Possono trasferire solo dati di tipo intero.
D) Richiedono permessi di amministratore per essere create.
Risposta: A

Qual è la funzione usata per creare una FIFO in C?

A) pipe()
B) mkfifo()
C) fopen()
D) open()
Risposta: B

Quale dei seguenti è un esempio di comando che utilizza le pipe in una shell?

A) ls | wc -l
B) cp file1 file2
C) mkdir new_folder
D) rm -rf folder
Risposta: A

Qual è il valore di ritorno della funzione mmap in caso di insuccesso?

A) NULL
B) -1
C) 0
D) 1
Risposta: B

Esercizi
Creare un programma in C che crea una pipe, genera un processo figlio e usa la pipe per passare una stringa dal processo padre al processo figlio. Il figlio deve stampare la stringa ricevuta.

c
Copia codice
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/wait.h>
#define MAXLINE 1024

int main(int argc, char *argv[]) {
    int pfd[2], status;
    char line[MAXLINE];

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <string>\n", argv[0]);
        exit(1);
    }

    pipe(pfd);
    if (fork() > 0) { /* Padre */
        close(pfd[0]);
        write(pfd[1], argv[1], strlen(argv[1]));                           
        wait(&status);
    } else { /* Figlio */
        close(pfd[1]);
        read(pfd[0], line, MAXLINE);
        printf("Ricevuto: %s\n", line);
    }
    exit(0);
}
Scrivere un programma in C che crea una FIFO, legge iterativamente una riga di testo dalla tastiera e la scrive sulla FIFO se l'argomento è 'write', oppure legge dalla FIFO e stampa il contenuto se l'argomento è 'read'.

c
Copia codice
#include <stdio.h>
#include <sys/stat.h>
#include <string.h>
#include <stdlib.h>
#define FIFO "my-fifo"
#define BUF_SIZE 512

int main(int argc, char * argv[]){
    FILE * f;
    char buffer[BUF_SIZE];
    
    if (argc != 2 || (strcmp(argv[1], "read") != 0 && strcmp(argv[1], "write") != 0)) {
        printf("Usage: %s read|write\n", argv[0]);
        return 1;
    }
    
    if (mkfifo(FIFO, S_IRWXU) < 0)
        perror("Warning: FIFO not created");
   
    if (strcmp(argv[1], "read") == 0) {
        f = fopen(FIFO, "r");
        if (f == NULL) {
            perror("Impossible to open the FIFO");
            return 1;
        }
        printf("Read mode:\n");
        while(fgets(buffer, BUF_SIZE, f) != NULL)
            printf("%s", buffer);
    } else {
        f = fopen(FIFO, "w");
        if (f == NULL) {
            perror("Impossible to open the FIFO");
            return 1;
        }
        printf("Write mode. Write lines of text:\n");
        while(fgets(buffer, BUF_SIZE, stdin) != NULL) {
            fputs(buffer, f);
            fflush(f);
        }
    }    
    return 0;
}
Questi quiz e esercizi sono progettati per testare la comprensione dei concetti chiave della comunicazione tra processi (IPC) e delle tecniche di programmazione presentate nelle slide del documento.